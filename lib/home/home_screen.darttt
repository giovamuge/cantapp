import 'package:cantapp/song/bloc.dart';
import 'package:cantapp/song/song_model.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final _scrollController = ScrollController();
  final _scrollThreshold = 200.0;
  SongBloc _songBloc;

  @override
  void initState() {
    super.initState();
    _scrollController.addListener(_onScroll);
    _songBloc = BlocProvider.of<SongBloc>(context);
  }

  @override
  Widget build(BuildContext context) {
    return BlocBuilder<SongBloc, SongState>(
      builder: (context, state) {
        if (state is SongUninitialized) {
          return Center(
            child: CircularProgressIndicator(),
          );
        }
        if (state is SongError) {
          return Center(
            child: Text('failed to fetch songs'),
          );
        }
        if (state is SongLoaded) {
          if (state.songs.isEmpty) {
            return Center(
              child: Text('no songs'),
            );
          }
          return SingleChildScrollView(
            child: LayoutBuilder(
              builder: (context, constraints) {
                return Column(
                  mainAxisSize: MainAxisSize.max,
                  children: <Widget>[
                    SizedBox(height: 30),
                    Container(
                        padding: const EdgeInsets.symmetric(horizontal: 15),
                        alignment: Alignment.centerLeft,
                        child: Text("Cantapp", style: TextStyle(fontSize: 50))),
                    SizedBox(height: 15),
                    Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 15),
                      child: TextField(
                        decoration: InputDecoration(
                          filled: true,
                          // fillColor: Color(0xFFDBEDFF),
                          fillColor: Colors.white,
                          contentPadding: EdgeInsets.symmetric(
                              horizontal: 15, vertical: 7.5),
                          enabledBorder: OutlineInputBorder(
                            borderRadius:
                                BorderRadius.all(Radius.circular(10.0)),
                            borderSide: BorderSide.none,
                          ),
                          focusedBorder: OutlineInputBorder(
                            borderRadius:
                                BorderRadius.all(Radius.circular(10.0)),
                            borderSide: BorderSide.none,
                          ),
                          hintText: 'Cerca',
                          // hintStyle: TextStyle(color: Colors.white),
                        ),
                      ),
                    ),
                    SizedBox(height: 50),
                    // ListView.builder(
                    //   shrinkWrap: true,
                    //   physics: const NeverScrollableScrollPhysics(),
                    //   itemBuilder: (BuildContext context, int index) {
                    //     return index >= state.songs.length
                    //         ? BottomLoader()
                    //         : SongWidget(
                    //             song: state.songs[index], number: index);
                    //   },
                    //   itemCount: state.hasReachedMax
                    //       ? state.songs.length
                    //       : state.songs.length + 1,
                    //   controller: _scrollController,
                    // ),
                    ListView.builder(
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemBuilder: (BuildContext context, int index) {
                        return SongWidget(
                            song: state.songs[index], number: index);
                      },
                      itemCount: state.songs.length,
                      controller: _scrollController,
                    ),
                  ],
                );
              },
            ),
          );
        }

        return Center(
          child: Text("Non esistono canzoni"),
        );
      },
    );
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  void _onScroll() {
    final maxScroll = _scrollController.position.maxScrollExtent;
    final currentScroll = _scrollController.position.pixels;
    if (maxScroll - currentScroll <= _scrollThreshold) {
      _songBloc.add(Fetch());
    }
  }
}

class SongWidget extends StatelessWidget {
  final Song song;
  final int number;

  const SongWidget({Key key, @required this.song, @required this.number})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    return ListTile(
      title: Text('$number. ${song.title}'),
      // isThreeLine: true,
      // subtitle: Text("Prova"),
      dense: true,
    );
  }
}

class BottomLoader extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.center,
      child: Center(
        child: SizedBox(
          width: 33,
          height: 33,
          child: CircularProgressIndicator(
            strokeWidth: 1.5,
          ),
        ),
      ),
    );
  }
}
